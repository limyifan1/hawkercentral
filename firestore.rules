rules_version = '2';
service cloud.firestore {
  //TESTING RULES, *****************
  // 1) Install required dependencies by npm install 
  // 2) Run emulators for firestore: firebase emulators:start --only firestore
  // 3) cd to /functions folder and run `npm test`
  //*********

  //Matches only /hawkers/{documentId} and not any deeper subcollections/documents, those matches has to be written explicitly
  match /databases/{database}/documents {
  //checks if a given number is a postive number and is a number object
  	function isNumber(num){
    	return (num is float || num is int);
    }

    function isString(stringToTest){
      return (stringToTest is string);
    }
    
    function isPositiveNumber(num){
      return isNumber(num) && num > 0;
    }

    function isValidPhoneNumber(num){
       return string(num).matches('^(6|8|9)[0-9]{7}$') || num == 0;
    }

    function hasValidFields(fields){
      return fields.hasAll([
      'name', 
      'postal' , 
      'street', 
      'price', 
      'description', 
      'description_detail', 
      'image1', 'image2', 
      'image3', 
      'image4', 
      'image5', 
      'image6' ,
      'imageFile1',
      'imageFile2',
      'imageFile3',
      'imageFile4',
      'imageFile5',
      'imageFile6',
      'imageName',
      'longitude', 
      'latitude',
      'unit',
      'delivery_option',
      'pickup_option',
      'delivery',
      'cuisineValue',
      'call',
      'whatsapp',
      'sms',
      'inperson',
      'contact',
      'docid',
      'opening',
      'region',
      'website',
      'promo',
      'condition',
      'delivery_detail',
      'menu',
      'menuitem',
      'menuprice',
      'wechatid' ])
    }
    
    // TODO: Need structure
    match /deliveries/{document=**} {
      allow read: if true;
      allow delete: if false;
      allow update: if true;
      allow create: if true;
    }

    // TODO: Need structure
    match /cuisine/{document=**} {
      allow read: if true;
      allow delete: if false;
      allow update: if true;
      allow create: if true;
    }

    match /hawkers/{document} {
      //Reads are public, but may incur download costs if malicious users continuously reads them.
      allow read;
      //So are writes, all they need to know is the correct structure to allow these writes, but we validation, we can prevent less garbage data.
      allow write: if isString(request.resource.data.name) // Required Field 
      && isValidPhoneNumber(request.resource.data.contact) // Required Field
      && isPositiveNumber(request.resource.data.postal) // Required Field
      && hasValidFields(request.resource.data.keys()) //This prevents any writes without any of these fields and prevents arbitrary fields from being written.
      //Allow update, TODO: needs validation
      allow update: if true
      //Disallow delete  
      allow delete: if false;
    }
  }
}